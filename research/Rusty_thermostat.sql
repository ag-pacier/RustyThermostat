CREATE TABLE "PollutionReading" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "timestamp" timestamp NOT NULL,
  "AQI" integer NOT NULL,
  "CO" float NOT NULL,
  "NO" float NOT NULL,
  "NO2" float NOT NULL,
  "O3" float NOT NULL,
  "SO2" float NOT NULL,
  "PM2_5" float NOT NULL,
  "NH3" float NOT NULL
);

CREATE TABLE "WeatherReading" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "timestamp" timestamp NOT NULL,
  "condition" string NOT NULL,
  "description" text NOT NULL,
  "icon" string NOT NULL,
  "tempReal" float NOT NULL,
  "tempFeel" float NOT NULL,
  "pressureSea" integer NOT NULL,
  "humidity" integer NOT NULL,
  "pressureGround" integer NOT NULL,
  "visibility" integer NOT NULL,
  "windSpeed" float NOT NULL,
  "windDeg" integer NOT NULL,
  "windGust" float NOT NULL,
  "rain1H" float,
  "rain3H" float,
  "snow1H" float,
  "snow3H" float,
  "clouds" integer NOT NULL,
  "dt" integer NOT NULL,
  "sunrise" integer NOT NULL,
  "sunset" integer NOT NULL
);

CREATE TABLE "IndoorCondition" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "lastChanged" timestamp NOT NULL,
  "houseTemp" float DEFAULT 'all_zone_mean_temp()',
  "houseHumidity" integer DEFAULT 'all_zone_mean_humid()',
  "capability" integer NOT NULL,
  "systemActive" integer NOT NULL
);

CREATE TABLE "EnvCapability" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "heating" binary NOT NULL DEFAULT 'false',
  "cooling" binary NOT NULL DEFAULT 'false',
  "lastChanged" datetime
);

CREATE TABLE "HVACactivity" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "heating" binary NOT NULL DEFAULT 'false',
  "heatLastChange" datetime,
  "cooling" binary NOT NULL DEFAULT 'false',
  "coolLastChange" datetime
);

CREATE TABLE "Zones" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "Name" string NOT NULL,
  "active" binary NOT NULL,
  "capability" integer NOT NULL,
  "timeAdded" datetime NOT NULL,
  "lastChanged" datetime,
  "currentTemp" float,
  "currentHumid" integer,
  "systemActive" integer NOT NULL,
  "presence" binary,
  "thresholdsClosed" binary
);

CREATE TABLE "ControllerZone" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "ZoneID" integer NOT NULL,
  "ControllerID" integer NOT NULL
);

CREATE TABLE "SensorZone" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "ZoneID" integer NOT NULL,
  "SensorID" integer NOT NULL
);

CREATE TABLE "AlertAssociate" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "AlertID" integer NOT NULL,
  "ZoneID" integer,
  "ScheduleID" integer
);

CREATE TABLE "ScheduleZone" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "ZoneID" integer NOT NULL,
  "ScheduleID" integer NOT NULL
);

CREATE TABLE "Schedules" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "active" binary NOT NULL,
  "name" string NOT NULL,
  "lastChanged" datetime,
  "timeStart" time,
  "timeEnd" time,
  "weekDay" integer,
  "dateStart" date,
  "dateEnd" date,
  "tempMin" float,
  "tempMax" float
);

CREATE TABLE "Sensors" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "active" binary NOT NULL,
  "Name" string NOT NULL,
  "timeAdded" timestamp NOT NULL,
  "timeUpdated" datetime,
  "comType" integer NOT NULL,
  "comLast" datetime,
  "currentTemp" float,
  "currentHumid" integer,
  "presence" binary,
  "thresholdOpen" binary
);

CREATE TABLE "Controllers" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "Name" string UNIQUE NOT NULL,
  "active" binary NOT NULL,
  "comType" integer NOT NULL,
  "Primary" binary NOT NULL DEFAULT 'true',
  "timeAdded" timestamp NOT NULL,
  "timeChanged" datetime,
  "timeConnectLast" datetime,
  "capability" integer NOT NULL,
  "systemActive" integer NOT NULL
);

CREATE TABLE "Communication" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "Name" string NOT NULL,
  "active" binary NOT NULL
);

CREATE TABLE "Alerts" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "Name" string UNIQUE NOT NULL,
  "active" binary NOT NULL,
  "tripped" binary NOT NULL DEFAULT false,
  "comType" integer,
  "Actions" text
);

CREATE TABLE "Weekdays" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "Sunday" binary NOT NULL,
  "Monday" binary NOT NULL,
  "Tuesday" binary NOT NULL,
  "Wednesday" binary NOT NULL,
  "Thursday" binary NOT NULL,
  "Friday" binary NOT NULL,
  "Saturday" binary NOT NULL
);

CREATE TABLE "ManualChangeHistory" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "changeTiming" timestamp NOT NULL,
  "changeWeather" integer NOT NULL,
  "changePollution" integer NOT NULL,
  "newTemp" float,
  "newHumidity" integer,
  "changeSchedule" integer,
  "cancelledTiming" timestamp
);

CREATE TABLE "SensorReadingHistory" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY NOT NULL,
  "sensorID" integer NOT NULL,
  "timestamp" timestamp NOT NULL,
  "readingTemp" float,
  "readingHumidity" integer,
  "readingPresence" binary,
  "readingThresholdOpen" binary
);

COMMENT ON TABLE "PollutionReading" IS 'Stores API pollution responses';

COMMENT ON TABLE "WeatherReading" IS 'Stores weather API responses';

COMMENT ON COLUMN "WeatherReading"."dt" IS 'Time of calculation from the API';

COMMENT ON TABLE "IndoorCondition" IS 'Might need name change. This is a whole-house summary.';

COMMENT ON TABLE "EnvCapability" IS 'Table to contain what a house/zone/controller CAN do';

COMMENT ON TABLE "HVACactivity" IS 'Table to contain what a house/zone/controller IS doing';

COMMENT ON TABLE "Zones" IS 'They do not inherently need a controller or sensors';

COMMENT ON COLUMN "Zones"."currentTemp" IS 'Needs to be the median temp of all zones';

COMMENT ON COLUMN "Zones"."currentHumid" IS 'Needs to be the median humidity of all zones';

COMMENT ON COLUMN "Zones"."presence" IS 'If any sensors sense presence, this is true';

COMMENT ON TABLE "ControllerZone" IS 'Table for associating Controllers with Zones';

COMMENT ON TABLE "SensorZone" IS 'Table for associating Sensors with Zones';

COMMENT ON TABLE "AlertAssociate" IS 'Table for associating Alerts with either zones or schedules';

COMMENT ON TABLE "ScheduleZone" IS 'Table for associating schedules with zones';

COMMENT ON TABLE "Schedules" IS 'Schedules for desired temperature or alerts';

COMMENT ON TABLE "Sensors" IS 'Table for tracking sensors';

COMMENT ON COLUMN "Sensors"."comLast" IS 'Last time the server successfully pulled data from the sensor';

COMMENT ON TABLE "Controllers" IS 'Table for tracking controllers. Controllers can toggle heating and cooling systems physically.';

COMMENT ON COLUMN "Controllers"."Primary" IS 'If there are multiple controllers in a zone with the same capability, this one will be tried first and others are tried only after this one fails';

COMMENT ON COLUMN "Controllers"."timeConnectLast" IS 'Last time the server successfully changed a state on the controller.';

COMMENT ON TABLE "Communication" IS 'Table to contain valid ways for the server, controllers and sensors to talk to each other.';

COMMENT ON TABLE "Alerts" IS 'Table for tracking available alerts and what they do when tripped';

COMMENT ON TABLE "Weekdays" IS 'Table for days of the week. I might not need this.';

COMMENT ON TABLE "ManualChangeHistory" IS 'Table to capture times when a manual change is made to help build patterns';

COMMENT ON TABLE "SensorReadingHistory" IS 'History of all sensor readings';

ALTER TABLE "IndoorCondition" ADD FOREIGN KEY ("capability") REFERENCES "EnvCapability" ("id");

ALTER TABLE "IndoorCondition" ADD FOREIGN KEY ("systemActive") REFERENCES "HVACactivity" ("id");

ALTER TABLE "Zones" ADD FOREIGN KEY ("capability") REFERENCES "EnvCapability" ("id");

ALTER TABLE "Zones" ADD FOREIGN KEY ("systemActive") REFERENCES "HVACactivity" ("id");

CREATE TABLE "Zones_ControllerZone" (
  "Zones_id" integer,
  "ControllerZone_ZoneID" integer,
  PRIMARY KEY ("Zones_id", "ControllerZone_ZoneID")
);

ALTER TABLE "Zones_ControllerZone" ADD FOREIGN KEY ("Zones_id") REFERENCES "Zones" ("id");

ALTER TABLE "Zones_ControllerZone" ADD FOREIGN KEY ("ControllerZone_ZoneID") REFERENCES "ControllerZone" ("ZoneID");


CREATE TABLE "Controllers_ControllerZone" (
  "Controllers_id" integer,
  "ControllerZone_ControllerID" integer,
  PRIMARY KEY ("Controllers_id", "ControllerZone_ControllerID")
);

ALTER TABLE "Controllers_ControllerZone" ADD FOREIGN KEY ("Controllers_id") REFERENCES "Controllers" ("id");

ALTER TABLE "Controllers_ControllerZone" ADD FOREIGN KEY ("ControllerZone_ControllerID") REFERENCES "ControllerZone" ("ControllerID");


CREATE TABLE "Zones_SensorZone" (
  "Zones_id" integer,
  "SensorZone_ZoneID" integer,
  PRIMARY KEY ("Zones_id", "SensorZone_ZoneID")
);

ALTER TABLE "Zones_SensorZone" ADD FOREIGN KEY ("Zones_id") REFERENCES "Zones" ("id");

ALTER TABLE "Zones_SensorZone" ADD FOREIGN KEY ("SensorZone_ZoneID") REFERENCES "SensorZone" ("ZoneID");


CREATE TABLE "Sensors_SensorZone" (
  "Sensors_id" integer,
  "SensorZone_SensorID" integer,
  PRIMARY KEY ("Sensors_id", "SensorZone_SensorID")
);

ALTER TABLE "Sensors_SensorZone" ADD FOREIGN KEY ("Sensors_id") REFERENCES "Sensors" ("id");

ALTER TABLE "Sensors_SensorZone" ADD FOREIGN KEY ("SensorZone_SensorID") REFERENCES "SensorZone" ("SensorID");


CREATE TABLE "Alerts_AlertAssociate" (
  "Alerts_id" integer,
  "AlertAssociate_AlertID" integer,
  PRIMARY KEY ("Alerts_id", "AlertAssociate_AlertID")
);

ALTER TABLE "Alerts_AlertAssociate" ADD FOREIGN KEY ("Alerts_id") REFERENCES "Alerts" ("id");

ALTER TABLE "Alerts_AlertAssociate" ADD FOREIGN KEY ("AlertAssociate_AlertID") REFERENCES "AlertAssociate" ("AlertID");


CREATE TABLE "Zones_AlertAssociate" (
  "Zones_id" integer,
  "AlertAssociate_ZoneID" integer,
  PRIMARY KEY ("Zones_id", "AlertAssociate_ZoneID")
);

ALTER TABLE "Zones_AlertAssociate" ADD FOREIGN KEY ("Zones_id") REFERENCES "Zones" ("id");

ALTER TABLE "Zones_AlertAssociate" ADD FOREIGN KEY ("AlertAssociate_ZoneID") REFERENCES "AlertAssociate" ("ZoneID");


CREATE TABLE "Schedules_AlertAssociate" (
  "Schedules_id" integer,
  "AlertAssociate_ScheduleID" integer,
  PRIMARY KEY ("Schedules_id", "AlertAssociate_ScheduleID")
);

ALTER TABLE "Schedules_AlertAssociate" ADD FOREIGN KEY ("Schedules_id") REFERENCES "Schedules" ("id");

ALTER TABLE "Schedules_AlertAssociate" ADD FOREIGN KEY ("AlertAssociate_ScheduleID") REFERENCES "AlertAssociate" ("ScheduleID");


CREATE TABLE "Zones_ScheduleZone" (
  "Zones_id" integer,
  "ScheduleZone_ZoneID" integer,
  PRIMARY KEY ("Zones_id", "ScheduleZone_ZoneID")
);

ALTER TABLE "Zones_ScheduleZone" ADD FOREIGN KEY ("Zones_id") REFERENCES "Zones" ("id");

ALTER TABLE "Zones_ScheduleZone" ADD FOREIGN KEY ("ScheduleZone_ZoneID") REFERENCES "ScheduleZone" ("ZoneID");


CREATE TABLE "Schedules_ScheduleZone" (
  "Schedules_id" integer,
  "ScheduleZone_ScheduleID" integer,
  PRIMARY KEY ("Schedules_id", "ScheduleZone_ScheduleID")
);

ALTER TABLE "Schedules_ScheduleZone" ADD FOREIGN KEY ("Schedules_id") REFERENCES "Schedules" ("id");

ALTER TABLE "Schedules_ScheduleZone" ADD FOREIGN KEY ("ScheduleZone_ScheduleID") REFERENCES "ScheduleZone" ("ScheduleID");


ALTER TABLE "Schedules" ADD FOREIGN KEY ("weekDay") REFERENCES "Weekdays" ("id");

ALTER TABLE "Sensors" ADD FOREIGN KEY ("comType") REFERENCES "Communication" ("id");

ALTER TABLE "Controllers" ADD FOREIGN KEY ("comType") REFERENCES "Communication" ("id");

ALTER TABLE "Controllers" ADD FOREIGN KEY ("capability") REFERENCES "EnvCapability" ("id");

ALTER TABLE "Controllers" ADD FOREIGN KEY ("systemActive") REFERENCES "HVACactivity" ("id");

ALTER TABLE "Alerts" ADD FOREIGN KEY ("comType") REFERENCES "Communication" ("id");

ALTER TABLE "ManualChangeHistory" ADD FOREIGN KEY ("changeWeather") REFERENCES "WeatherReading" ("id");

ALTER TABLE "ManualChangeHistory" ADD FOREIGN KEY ("changePollution") REFERENCES "PollutionReading" ("id");

ALTER TABLE "ManualChangeHistory" ADD FOREIGN KEY ("changeSchedule") REFERENCES "Schedules" ("id");

ALTER TABLE "SensorReadingHistory" ADD FOREIGN KEY ("sensorID") REFERENCES "Sensors" ("id");
