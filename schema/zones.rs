//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "Zones")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "Name", column_type = "Text")]
    pub name: String,
    pub active: bool,
    pub capability: i32,
    #[sea_orm(column_name = "timeAdded")]
    pub time_added: DateTime,
    #[sea_orm(column_name = "lastChanged")]
    pub last_changed: Option<DateTime>,
    #[sea_orm(column_name = "currentTemp", column_type = "Double", nullable)]
    pub current_temp: Option<f64>,
    #[sea_orm(column_name = "currentHumid")]
    pub current_humid: Option<i32>,
    #[sea_orm(column_name = "systemActive")]
    pub system_active: i32,
    pub presence: Option<bool>,
    #[sea_orm(column_name = "thresholdsClosed")]
    pub thresholds_closed: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alerts::Entity")]
    Alerts,
    #[sea_orm(has_many = "super::controllers::Entity")]
    Controllers,
    #[sea_orm(
        belongs_to = "super::env_capability::Entity",
        from = "Column::Capability",
        to = "super::env_capability::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EnvCapability,
    #[sea_orm(
        belongs_to = "super::hva_cactivity::Entity",
        from = "Column::SystemActive",
        to = "super::hva_cactivity::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    HvaCactivity,
    #[sea_orm(has_many = "super::schedules::Entity")]
    Schedules,
    #[sea_orm(has_many = "super::sensors::Entity")]
    Sensors,
}

impl Related<super::alerts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Alerts.def()
    }
}

impl Related<super::controllers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Controllers.def()
    }
}

impl Related<super::env_capability::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EnvCapability.def()
    }
}

impl Related<super::hva_cactivity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HvaCactivity.def()
    }
}

impl Related<super::schedules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Schedules.def()
    }
}

impl Related<super::sensors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sensors.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
