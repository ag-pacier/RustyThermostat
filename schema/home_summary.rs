//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "HomeSummary")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "lastChanged")]
    pub last_changed: DateTime,
    #[sea_orm(column_name = "houseTemp", column_type = "Double", nullable)]
    pub house_temp: Option<f64>,
    #[sea_orm(column_name = "houseHumidity")]
    pub house_humidity: Option<i32>,
    pub capability: i32,
    #[sea_orm(column_name = "systemActive")]
    pub system_active: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::env_capability::Entity",
        from = "Column::Capability",
        to = "super::env_capability::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EnvCapability,
    #[sea_orm(
        belongs_to = "super::hva_cactivity::Entity",
        from = "Column::SystemActive",
        to = "super::hva_cactivity::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    HvaCactivity,
}

impl Related<super::env_capability::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EnvCapability.def()
    }
}

impl Related<super::hva_cactivity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HvaCactivity.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
