//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "Schedules")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Uuid,
    pub active: bool,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_name = "associatedZone")]
    pub associated_zone: Option<i32>,
    #[sea_orm(column_name = "lastChanged")]
    pub last_changed: Option<DateTime>,
    #[sea_orm(column_name = "timeStart")]
    pub time_start: Option<Time>,
    #[sea_orm(column_name = "timeEnd")]
    pub time_end: Option<Time>,
    #[sea_orm(column_name = "weekDay")]
    pub week_day: Option<i32>,
    #[sea_orm(column_name = "dateStart")]
    pub date_start: Option<Date>,
    #[sea_orm(column_name = "dateEnd")]
    pub date_end: Option<Date>,
    #[sea_orm(column_name = "tempMin", column_type = "Double", nullable)]
    pub temp_min: Option<f32>,
    #[sea_orm(column_name = "tempMax", column_type = "Double", nullable)]
    pub temp_max: Option<f32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alerts::Entity")]
    Alerts,
    #[sea_orm(has_many = "super::manual_change_history::Entity")]
    ManualChangeHistory,
    #[sea_orm(
        belongs_to = "super::weekdays::Entity",
        from = "Column::WeekDay",
        to = "super::weekdays::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Weekdays,
    #[sea_orm(
        belongs_to = "super::zones::Entity",
        from = "Column::AssociatedZone",
        to = "super::zones::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Zones,
}

impl Related<super::alerts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Alerts.def()
    }
}

impl Related<super::manual_change_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ManualChangeHistory.def()
    }
}

impl Related<super::weekdays::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Weekdays.def()
    }
}

impl Related<super::zones::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Zones.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
