//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "Sensors")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub active: bool,
    #[sea_orm(column_name = "Name", column_type = "Text")]
    pub name: String,
    #[sea_orm(column_name = "Token", column_type = "Text", unique)]
    pub token: String,
    #[sea_orm(column_name = "associatedZone")]
    pub associated_zone: Option<i32>,
    #[sea_orm(column_name = "timeAdded")]
    pub time_added: DateTime,
    #[sea_orm(column_name = "timeUpdated")]
    pub time_updated: Option<DateTime>,
    #[sea_orm(column_name = "comType")]
    pub com_type: i32,
    #[sea_orm(column_name = "comLast")]
    pub com_last: Option<DateTime>,
    #[sea_orm(column_name = "currentTemp", column_type = "Double", nullable)]
    pub current_temp: Option<f64>,
    #[sea_orm(column_name = "currentHumid")]
    pub current_humid: Option<i32>,
    pub presence: Option<bool>,
    #[sea_orm(column_name = "thresholdOpen")]
    pub threshold_open: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::communication::Entity",
        from = "Column::ComType",
        to = "super::communication::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Communication,
    #[sea_orm(has_many = "super::sensor_reading_history::Entity")]
    SensorReadingHistory,
    #[sea_orm(
        belongs_to = "super::zones::Entity",
        from = "Column::AssociatedZone",
        to = "super::zones::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Zones,
}

impl Related<super::communication::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Communication.def()
    }
}

impl Related<super::sensor_reading_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SensorReadingHistory.def()
    }
}

impl Related<super::zones::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Zones.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
