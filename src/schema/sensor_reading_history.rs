//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "SensorReadingHistory")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Uuid,
    #[sea_orm(column_name = "sensorID")]
    pub sensor_id: i32,
    pub timestamp: DateTime,
    #[sea_orm(column_name = "readingTemp", column_type = "Float", nullable)]
    pub reading_temp: Option<f32>,
    #[sea_orm(column_name = "readingHumidity")]
    pub reading_humidity: Option<i32>,
    #[sea_orm(column_name = "readingPresence")]
    pub reading_presence: Option<bool>,
    #[sea_orm(column_name = "readingThresholdOpen")]
    pub reading_threshold_open: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sensors::Entity",
        from = "Column::SensorId",
        to = "super::sensors::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Sensors,
}

impl Related<super::sensors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sensors.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
