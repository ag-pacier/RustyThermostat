//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "ManualChangeHistory")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "changeTiming")]
    pub change_timing: DateTime,
    #[sea_orm(column_name = "changeWeather")]
    pub change_weather: i32,
    #[sea_orm(column_name = "changePollution")]
    pub change_pollution: i32,
    #[sea_orm(column_name = "changeSource")]
    pub change_source: i32,
    #[sea_orm(column_name = "newTemp", column_type = "Double", nullable)]
    pub new_temp: Option<f64>,
    #[sea_orm(column_name = "newHumidity")]
    pub new_humidity: Option<i32>,
    #[sea_orm(column_name = "changeSchedule")]
    pub change_schedule: Option<i32>,
    #[sea_orm(column_name = "cancelledTiming")]
    pub cancelled_timing: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::change_source::Entity",
        from = "Column::ChangeSource",
        to = "super::change_source::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ChangeSource,
    #[sea_orm(
        belongs_to = "super::pollution_reading::Entity",
        from = "Column::ChangePollution",
        to = "super::pollution_reading::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PollutionReading,
    #[sea_orm(
        belongs_to = "super::schedules::Entity",
        from = "Column::ChangeSchedule",
        to = "super::schedules::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Schedules,
    #[sea_orm(
        belongs_to = "super::weather_reading::Entity",
        from = "Column::ChangeWeather",
        to = "super::weather_reading::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WeatherReading,
}

impl Related<super::change_source::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChangeSource.def()
    }
}

impl Related<super::pollution_reading::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PollutionReading.def()
    }
}

impl Related<super::schedules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Schedules.def()
    }
}

impl Related<super::weather_reading::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WeatherReading.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
